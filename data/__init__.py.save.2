import torch.utils.data
from data.base_data_loader import BaseDataLoader
import numpy as np, h5py
import random
def CreateDataLoader(opt):
    data_loader = CustomDatasetDataLoader()
    print(data_loader.name())
    data_loader.initialize(opt)
    return data_loader


def CreateDataset(opt):
    dataset = None

    if opt.dataset_mode =='fastmri':
        target_file='/auto/data2/korkmaz/DIP_PROJECT/fastmri/brain/'+opt.output_mod+'/'+opt.output_mod+'_under_sampled_'+str(opt.us_t1)+'x_multicoil_'+str(opt.phase)+'.mat'
        f = h5py.File(target_file,'r') 
        data_us_t1=np.transpose(np.array(f['images_us']),(0,1,3,2))
        data_us_t1=data_us_t1['real']+ 1j *data_us_t1['imag']        
        coil_maps=np.transpose(np.array(f['coil_maps']),(0,1,3,2))
        coil_maps=coil_maps['real']+ 1j *coil_maps['imag'] 
        data_us_t1=np.sum(np.conjugate(coil_maps)*data_us_t1,axis=0)
        data_us_t1=np.expand_dims(data_us_t1,0)
        data_us_t1_mag=np.absolute(data_us_t1)
        data_us_t1_phase=np.angle(data_us_t1)/(2*np.pi)+1

        data_fs_t1=np.transpose(np.array(f['images_fs']),(0,2,1))
        data_fs_t1=data_fs_t1['real']+ 1j *data_fs_t1['imag']  
        data_fs_t1=np.expand_dims(data_fs_t1,0)
        data_fs=np.absolute(data_fs_t1)   
        
#        
        
        subjects=data_fs.shape[1]/10
        print(subjects)    
        data_us_t1_mag=np.split(data_us_t1_mag,subjects,axis=1)
        norm_t1=[x.max() for x in data_us_t1_mag]
        data_us_t1_mag=[x/x.max() for x in data_us_t1_mag]            
        data_us_t1_mag=np.concatenate(data_us_t1_mag,axis=1)
        data_us_t1=np.concatenate((data_us_t1_mag,data_us_t1_phase),axis=0)

        
        data_fs=np.split(data_fs,subjects,axis=1)
        for ii in range(len(data_fs)):
            data_fs[ii]=data_fs[ii]/norm_t1[ii]

        data_fs=np.concatenate(data_fs,axis=1)
        print(data_fs.max())
        data_us=data_us_t1        

        dataset=[]                       
        for train_sample in range(data_us.shape[1]):
            data_us[:,train_sample,:,:]=(data_us[:,train_sample,:,:]-0.5)/0.5
            data_fs[:,train_sample,:,:]=(data_fs[:,train_sample,:,:]-0.5)/0.5
            dataset.append({'A': torch.from_numpy(data_us[:,train_sample,:,:]), 'B':torch.from_numpy(data_fs[:,train_sample,:,:]), 
            'A_paths':opt.dataroot, 'B_paths':opt.dataroot})
        print('#training images = %d' % train_sample)
        print(data_us.shape)
        print(data_fs.shape)  

    elif opt.dataset_mode =='gokberk':
        #target_file='/auto/data2/salman/datasets/recsynth/IXI_gaussian/T1_'+str(opt.us_t1)+'_multi_synth_recon_'+str(opt.phase)+'.mat'
        target_file = '/auto/data2/gelmas/recon_rGAN_MRNet-v1.0/'+str(opt.phase)+'/data.mat'
	#target_file = '/auto/data2/gelmas/recon_rGAN_fastMRI_knee/'+str(opt.phase)+'/data.mat' 
	#target_file = '/auto/data2/gelmas/recon_rGAN_brats/'+str(opt.phase)+'/data.mat' 


        #target_file='/auto/data2/korkmaz/DIP_PROJECT/fastmri/brain/'+opt.output_mod+'/'+opt.output_mod+'_under_sampled_'+str(opt.us_t1)+'x_multicoil_'+str(opt.phase)+'.mat'
        f = h5py.File(target_file,'r') 
        data_us=np.transpose(np.array(f['data_us']),(0,1,3,2))
        data_us=data_us.astype(np.float32)
        #data_fs=np.transpose(np.array(f['images_fs']),(0,1,3,2))
        #data_fs=data_fs.astype(np.float32)

        data_fs=np.expand_dims(np.transpose(np.array(f['data_fs']),(0,2,1)),axis=0)
        data_fs=data_fs.astype(np.float32)      
        dataset=[]                       
        for train_sample in range(data_us.shape[1]):
            data_us[:,train_sample,:,:]=(data_us[:,train_sample,:,:]-0.5)/0.5
            data_fs[:,train_sample,:,:]=(data_fs[:,train_sample,:,:]-0.5)/0.5
            dataset.append({'A': torch.from_numpy(data_us[:,train_sample,:,:]), 'B':torch.from_numpy(data_fs[:,train_sample,:,:]), 
            'A_paths':opt.dataroot, 'B_paths':opt.dataroot})
        print('#training images = %d' % train_sample)
        print(data_us.shape)
        print(data_fs.shape)
    elif opt.dataset_mode =='gokberk_test':
        #target_file='/auto/data2/salman/datasets/recsynth/IXI_gaussian/T1_'+str(opt.us_t1)+'_multi_synth_recon_'+str(opt.phase)+'.mat'
        target_file = '/auto/data2/gelmas/recon_rGAN_MRNet-v1.0/'+str(opt.phase)+'/data.mat'
        #target_file = '/auto/data2/gelmas/recon_rGAN_fastMRI_knee/'+str(opt.phase)+'/data.mat' 
	#target_file = '/auto/data2/gelmas/recon_rGAN_brats/'+str(opt.phase)+'/data.mat' 


        #target_file='/auto/data2/korkmaz/DIP_PROJECT/fastmri/brain/'+opt.output_mod+'/'+opt.output_mod+'_under_sampled_'+str(opt.us_t1)+'x_multicoil_'+str(opt.phase)+'.mat'
        f = h5py.File(target_file,'r') 
        data_us=np.transpose(np.array(f['data_us']),(0,1,3,2))
        data_us=data_us.astype(np.float32)
        

        data_fs=np.expand_dims(np.transpose(np.array(f['data_fs']),(0,2,1)),axis=0)
        data_fs=data_fs.astypdata_fs=np.expand_dims(np.transpose(np.array(f['data_fs']),(0,2,1)),axis=0)
        data_fs=data_fs.astype(np.float32)  e(np.float32)      
        dataset=[]                       
        for train_sample in range(data_us.shape[1]):
            data_us[:,train_sample,:,:]=(data_us[:,train_sample,:,:]-0.5)/0.5
            data_us_opt[:,train_sample,:,:]=(data_us_opt[:,train_sample,:,:]-0.5)/0.5
            data_fs[:,train_sample,:,:]=(data_fs[:,train_sample,:,:]-0.5)/0.5
            dataset.append({'A': torch.from_numpy(data_us[:,train_sample,:,:]), 'B':torch.from_numpy(data_fs[:,train_sample,:,:]),
                      'C': torch.from_numpy(data_us_opt[:,train_sample,:,:]),      
            'A_paths':opt.dataroot, 'B_paths':opt.dataroot, 'C_paths':opt.dataroot})
        print('#training images = %d' % train_sample)
        print(data_us.shape)
        print(data_us_opt.shape)
        print(data_fs.shape)    
         

    return dataset 



class CustomDatasetDataLoader(BaseDataLoader):
    def name(self):
        return 'CustomDatasetDataLoader'

    def initialize(self, opt):
        BaseDataLoader.initialize(self, opt)
        self.dataset = CreateDataset(opt)
        self.dataloader = torch.utils.data.DataLoader(
            self.dataset,
            batch_size=opt.batchSize,
            shuffle=not opt.serial_batches,
            num_workers=int(opt.nThreads))

    def load_data(self):
        return self

    def __len__(self):
        return min(len(self.dataset), self.opt.max_dataset_size)

    def __iter__(self):
        for i, data in enumerate(self.dataloader):
            if i >= self.opt.max_dataset_size:
                break
            yield data
